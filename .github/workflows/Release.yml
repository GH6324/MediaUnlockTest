name: Release

on:
  release:
    types: [prereleased,released] 
    
jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
    
    env:
      NDK_VERSION: "r26d"
      API_LEVEL: "21"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download Android NDK
        run: |
          mkdir -p $HOME/android-ndk
          wget https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux.zip
          unzip -q android-ndk-$NDK_VERSION-linux.zip -d $HOME/android-ndk
          mv $HOME/android-ndk/android-ndk-$NDK_VERSION $HOME/android-ndk/ndk
        shell: bash

      - name: Set up NDK environment
        run: |
          echo "NDK_ROOT=$HOME/android-ndk/ndk" >> $GITHUB_ENV
          echo "PATH=$PATH:$HOME/android-ndk/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Extract version from tag and update file
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION=$(echo "$TAG_NAME" | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+)-.*/\1/')
          echo "Extracted version: $VERSION"
          CURRENT_VERSION=$(grep '^[[:space:]]*Version[[:space:]]*=' mediaunlock.go | sed -E 's/.*Version[[:space:]]*=[[:space:]]*"([^"]+)".*/\1/')
          echo "Current version in file: $CURRENT_VERSION"
          if [ "$VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version mismatch. Updating from $CURRENT_VERSION to $VERSION"
            git checkout main || git checkout master
            sed -i "s/Version\s*=\s*\"[^\"]*\"/Version          = \"$VERSION\"/" mediaunlock.go
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add mediaunlock.go
            git commit -m "Update version to $VERSION"
            git push origin HEAD
            echo "Version updated and committed"
          else
            echo "Version is already up to date"
          fi
        shell: bash

      - name: Build unlock-test binaries
        run: |
          cd cli
          mkdir build
          bash build.sh

      - name: Build unlock-monitor binaries
        run: |
          cd monitor
          mkdir build
          bash build.sh
      
      - name: Upload unlock-test binaries
        run: |
          cd cli/build
          for file in *; do
            echo "Uploading $file"
            curl -s --fail --retry 3 --retry-delay 0 -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary "@$file" "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=$file"
          done
      
      - name: Upload unlock-monitor binaries
        run: |
          cd monitor/build
          for file in *; do
            echo "Uploading $file"
            curl -s --fail --retry 3 --retry-delay 0 -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary "@$file" "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=$file"
          done
